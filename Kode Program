#include <iostream>
#include <vector>
#include <chrono>

int fibonacciRecursive(int n) {
    if (n <= 1) {
        return n;
    }
    return fibonacciRecursive(n-1) + fibonacciRecursive(n-2);
}

int fibonacciDynamicProgramming(int n) {
    std::vector<int> dp(n+1);
    dp[0] = 0;
    dp[1] = 1;
    for (int i = 2; i <= n; i++) {
        dp[i] = dp[i-1] + dp[i-2];
    }
    return dp[n];
}

void measureExecutionTime(int n) {
    auto start = std::chrono::high_resolution_clock::now();
    int resultRecursive = fibonacciRecursive(n);
    auto stopRecursive = std::chrono::high_resolution_clock::now();
    auto durationRecursive = std::chrono::duration_cast<std::chrono::microseconds>(stopRecursive - start);

    start = std::chrono::high_resolution_clock::now();
    int resultDynamicProgramming = fibonacciDynamicProgramming(n);
    auto stopDynamicProgramming = std::chrono::high_resolution_clock::now();
    auto durationDynamicProgramming = std::chrono::duration_cast<std::chrono::microseconds>(stopDynamicProgramming - start);

    std::cout << "n = " << n << std::endl;
    std::cout << "Recursive: " << durationRecursive.count() << " microseconds" << std::endl;
    std::cout << "Dynamic Programming: " << durationDynamicProgramming.count() << " microseconds" << std::endl;
    std::cout << std::endl;
}

int main() {
    measureExecutionTime(10);
    measureExecutionTime(25);
    measureExecutionTime(30);
    measureExecutionTime(40);
    measureExecutionTime(50);
    return 0;
}
